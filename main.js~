var dataRecieved="";

var connectionId = -1;

var commands = {
	calibrate_mag: 1,
	calibrate_mag: 2,
	set: 3,
	set_pan: 4,
	feature: 4
};
String.prototype.contains = function(param) 
{ 
   return this.indexOf(param) != -1; 
};
String.prototype.getParamValue = function(parser) {
	return this.substr(this.indexOf(parser) + parser.length);
}


var last_sent_command;

  $( function() {
    $( ".controlgroup" ).controlgroup()
    $( ".controlgroup-vertical" ).controlgroup({
      "direction": "vertical"
    });
  } );
  
  $(function(){
	  $("#calibrate_pan").click(function(){
		chrome.serial.send(connectionId, str2ab('set pan0_calibrated=0\r\ncalibrate pan\r\n'), function() {});
		last_sent_command = commands.calibrate_pan;
		setCheckbox("#calibrate_pan","false");
	  });
	  
	  $("#calibrate_mag").click(function(){
		chrome.serial.send(connectionId, str2ab('set mag_calibrated=0\r\ncalibrate mag\r\n'), function() {});
		last_sent_command = commands.calibrate_mag;
	  });
	  
	  $("#save").click(function(){
		chrome.serial.send(connectionId, str2ab('save\n'), function() {});
	  });
	  $("#default").click(function(){
		chrome.serial.send(connectionId, str2ab('defaults\n'), function() {});
	  });
	  $("#exit").click(function(){
		chrome.serial.send(connectionId, str2ab('exit\n'), function() {});
	  });
	  $("#boot").click(function(){
		chrome.serial.send(connectionId, str2ab('boot mode\n'), function() {});
	  });
  });

function setPosition(position) {
  var buffer = new ArrayBuffer(1);
  //var uint8View = new Uint8Array(buffer);
  //uint8View[0] = '0'.charCodeAt(0) + position;
  //chrome.serial.send(connectionId, buffer, function() {});
  chrome.serial.send(connectionId, str2ab('heading ' + position + '\r\n'), function() {});
};

function getParam(param) {
  chrome.serial.send(connectionId, str2ab('set ' + param + '\r\n'), function() {});
};

function onReceive(receiveInfo) {
  if (receiveInfo.connectionId !== connectionId){
    return;
  }
  /*var uint8View = new Uint8Array(receiveInfo.data);
  console.log("test");//uint8View.toString());
  if(last_sent_command == commands.calibrate_pan) {
	
	var value = uint8View[uint8View.length - 1] - '0'.charCodeAt(0);
	$("#pan0-spinner").val(value);
	for (var i = 0; i < uint8View.length - 1; ++i) {
    		$("#body").append(uint8View[i]);
  	}
  }*/

	this.lineBuffer += ab2str(receiveInfo.data);

	var index;
	while ((index = this.lineBuffer.indexOf('\n')) >= 0) {
		var line = this.lineBuffer.substr(0, index + 1);
		//this.onReadLine.dispatch(line);
		console.log(line);
		switch(last_sent_command) {
			case commands.set:
				loadSpinners(line);
				loadCheckboxes(line);
				if(line.startsWith('Enabled:')){
					loadFeatures(line);
				}
				loadSelectmenus(line);
				break;
			case commands.calibrate_pan:
				if(line.contains('min ')){
					$("#pan0-spinner").val(line.getParamValue("min "));
				} else if(line.contains('max ')){
					$("#pan0-spinner").val(line.getParamValue("max "));
				} else if(line.contains('pan0=')){
					$("#pan0-spinner").val(line.getParamValue("pan0="));
				} else if(line.contains('min_pan_speed=')){
					$("#min_pan_speed-spinner").val(line.getParamValue("min_pan_speed="));
				} else if(line.contains('pan0_calibrated=')){
					$("#pan0_calibrated").attr('checked', true);
				}
				break;
			case commands.feature:
				if(line.startsWith('Enabled:')){
					loadFeatures(line);
				}
				break;
				
		}

		this.lineBuffer = this.lineBuffer.substr(index + 1);
	}

};

function loadSpinners(data){
	$("[id*='-spinner']").each(function(){
		var paramId = $(this).attr('id');
		var param = paramId.slice(0, paramId.indexOf("-spinner"));
		if(data.startsWith(param + " = ")) {
			var paramValue = data.getParamValue(param + " = ");
			$(this).val(paramValue);
			//console.log("El par치metro " + param + "-spinner" + " es igual a " + paramValue);
			$(this).on( "spinchange", function( event, ui ) {
				chrome.serial.send(connectionId, str2ab('set ' + param + '=' + this.value + '\n'), function() {});
			} );
			$(this).on( "spin", function( event, ui ) {
				chrome.serial.send(connectionId, str2ab('set ' + param + '=' + this.value + '\n'), function() {});
			} );
		}
	
	});
}
function loadCheckboxes(data){
	$("[id*='-checkbox']").each(function(){
		var paramId = $(this).attr('id');
		var param = paramId.slice(0, paramId.indexOf("-checkbox"));
		if(data.startsWith(param + " = ")) {
			var paramValue = (data.getParamValue(param + " = ") == '1')?false:true;
			setCheckbox("#" + paramId,paramValue);
			//console.log("El par치metro " + param + "-checkbox" + " es igual a " + paramValue);
		}
		$(this).on( "click", function( event, ui ) {
			var paramVamule = ($(this).prop('checked')==true)?0:1;
			chrome.serial.send(connectionId, str2ab('set ' + param + '=' + paramVamule + '\n'), function() {});
			console.log($(this).prop('checked') + " " + paramVamule);
		});
      
	})
}
function loadSelectmenus(data){
	$("[id*='-select']").each(function(){
		var paramId = $(this).attr('id');
		var param = paramId.slice(0, paramId.indexOf("-select"));
		if(data.startsWith(param + " = ")) {
			var paramValue = (data.getParamValue(param + " = ") == '1')?false:true;
			//setCheckbox("#" + paramId,paramValue);
			//console.log("El par치metro " + param + "-checkbox" + " es igual a " + paramValue);
		}
		/*$(this).on( "click", function( event, ui ) {
			var paramVamule = ($(this).prop('checked')==true)?0:1;
			chrome.serial.send(connectionId, str2ab('set ' + param + '=' + paramVamule + '\n'), function() {});
			console.log($(this).prop('checked') + " " + paramVamule);
		});*/
		$(this).val('UBLOX');
		$(this).selectmenu("refresh");
	})
}
function loadFeatures(data){
	$("[id*='-feature']").each(function(){
		var paramId = $(this).attr('id');
		var param = paramId.slice(0, paramId.indexOf("-feature"));
		if(data.contains(param)) {
			var paramValue = (data.getParamValue(param) == '1')?false:true;
			setCheckbox("#" + paramId,paramValue);
			//console.log("El par치metro " + param + "-checkbox" + " es igual a " + paramValue);
		}
		$(this).on( "click", function( event, ui ) {
			var paramVamule = ($(this).prop('checked')==true)?'':'-';
			var comando = str2ab('feature '  + paramVamule + param  + '\n');
			chrome.serial.send(connectionId, comando, function() {});
			console.log('feature '  + paramVamule + param  + '\n');
		});
      
	})
}
function setCheckbox(id,value){
	$(id).prop("checked", value);
	$(id).button("refresh");
}
function onError(errorInfo) {
  console.warn("Receive error on serial connection: " + errorInfo.error);
};

chrome.serial.onReceive.addListener(onReceive);
chrome.serial.onReceiveError.addListener(onError);
/*chrome.serial.onReadLine.addListener(function (line) {
    //Serial port data recieve event.
    dataRecieved = dataRecieved +line;
});*/



function onOpen(connectionInfo) {
  if (!connectionInfo) {
    setStatus('Could not open');
    return;
  }
  connectionId = connectionInfo.connectionId;
  setStatus('Connected');
  chrome.serial.send(connectionId, str2ab('RRR\r\n'), function() {});
  chrome.serial.send(connectionId, str2ab('set\r\n'), function() {});
  chrome.serial.send(connectionId, str2ab('feature\r\n'), function() {});
  last_sent_command = commands.set;
  setPosition(0);
};

function setStatus(status) {
  document.getElementById('status').innerText = status;
}

function buildPortPicker(ports) {
  var eligiblePorts = ports.filter(function(port) {
    return !port.path.match(/[Bb]luetooth/);
  });

  var portPicker = document.getElementById('port-picker');
  eligiblePorts.forEach(function(port) {
    var portOption = document.createElement('option');
    portOption.value = portOption.innerText = port.path;
    portPicker.appendChild(portOption);
  });
  portOption = document.createElement('option');
  portOption.value = portOption.innerText = '/dev/ttyS98';
  portPicker.appendChild(portOption);
  

  portPicker.onchange = function() {
    if (connectionId != -1) {
      chrome.serial.disconnect(connectionId, openSelectedPort);
      return;
    }
    openSelectedPort();
  };
}
var str2ab = function(str) {
  var encodedString = unescape(encodeURIComponent(str));
  var bytes = new Uint8Array(encodedString.length);
  for (var i = 0; i < encodedString.length; ++i) {
    bytes[i] = encodedString.charCodeAt(i);
  }
  return bytes.buffer;
};

function ab2str(buf) {
  return String.fromCharCode.apply(null, new Uint8Array(buf));
}

function openSelectedPort() {
  var portPicker = document.getElementById('port-picker');
  var selectedPort = portPicker.options[portPicker.selectedIndex].value;
  chrome.serial.connect(selectedPort, onOpen);
}

onload = function() {
  /*var tv = document.getElementById('tv');
  navigator.webkitGetUserMedia(
      {video: true},
      function(stream) {
        tv.classList.add('working');
        document.getElementById('camera-output').src =
            webkitURL.createObjectURL(stream);
      },
      function() {
        tv.classList.add('broken');
      });
  */
  window.resizeTo(1014,1170);
window.moveTo(0,0); 
  
  document.getElementById('position-input').onchange = function() {
    setPosition(parseInt(this.value));
  };

  chrome.serial.getDevices(function(ports) {
    buildPortPicker(ports)
    openSelectedPort();
  });
  $( "#tabs" ).tabs();
};
